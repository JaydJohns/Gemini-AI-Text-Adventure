import React, { useState, useCallback, useEffect } from 'react';
import { GameState, StoryState } from './types';
import { generateStoryPart, generateImage } from './services/geminiService';
import LoadingOverlay from './components/LoadingOverlay';
import ErrorDisplay from './components/ErrorDisplay';
import ChoiceButton from './components/ChoiceButton';

const genres = ['Fantasy', 'Sci-Fi', 'Mystery', 'Cyberpunk', 'Post-Apocalyptic'];

const GenreCard: React.FC<{ genre: string; onSelect: (genre: string) => void }> = ({ genre, onSelect }) => (
    <div 
        className="bg-gray-800 rounded-lg p-6 cursor-pointer border-2 border-transparent hover:border-cyan-500 hover:shadow-2xl hover:shadow-cyan-500/20 transform hover:-translate-y-2 transition-all duration-300"
        onClick={() => onSelect(genre)}
    >
        <h3 className="text-2xl font-cinzel text-center text-cyan-300">{genre}</h3>
    </div>
);

const App: React.FC = () => {
    const [gameState, setGameState] = useState<GameState>(GameState.GENRE_SELECT);
    const [storyState, setStoryState] = useState<StoryState | null>(null);
    const [error, setError] = useState<string | null>(null);
    const [isImageFading, setIsImageFading] = useState(false);

    const handleNewGame = useCallback(() => {
        setStoryState(null);
        setError(null);
        setGameState(GameState.GENRE_SELECT);
    }, []);

    const startGame = useCallback(async (genre: string) => {
        setGameState(GameState.LOADING);
        setError(null);
        try {
            const initialPrompt = `You are a master storyteller for an interactive text-based adventure game. Generate the very first scene for a game in the ${genre} genre. The hero is just beginning their journey. Your response must be a JSON object that strictly follows the provided schema. The 'scenario' should be engaging and set the scene. The 'imagePrompt' should be a detailed, cinematic description suitable for an AI image generator, focusing on atmosphere and key elements. The 'choices' should be an array of 3-4 distinct and interesting actions the player can take.`;
            
            const storyPart = await generateStoryPart(initialPrompt);
            const imageUrl = await generateImage(storyPart.imagePrompt);

            setStoryState({
                ...storyPart,
                imageUrl,
                history: [storyPart.scenario],
            });
            setGameState(GameState.PLAYING);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
            setGameState(GameState.ERROR);
        }
    }, []);

    const handleChoice = useCallback(async (choice: string) => {
        if (!storyState) return;

        setGameState(GameState.LOADING);
        setIsImageFading(true);
        setError(null);
        
        try {
            const previousScenario = storyState.scenario;
            const prompt = `You are continuing an interactive text-based adventure game. The previous scene was: "${previousScenario}". The player chose the action: "${choice}". Now, generate the next scene. Your response must be a JSON object that strictly follows the provided schema. The 'scenario' should describe the outcome of the player's action and the new situation. The 'imagePrompt' should describe the new scene for an AI image generator. Provide 3-4 new 'choices' for the player. Keep the story moving forward.`;
            
            const newStoryPart = await generateStoryPart(prompt);
            const newImageUrl = await generateImage(newStoryPart.imagePrompt);

            setStoryState(prevState => prevState ? ({
                ...newStoryPart,
                imageUrl: newImageUrl,
                history: [...prevState.history, newStoryPart.scenario],
            }) : null);
            setGameState(GameState.PLAYING);
        } catch (err) {
            setError(err instanceof Error ? err.message : 'An unknown error occurred.');
            setGameState(GameState.ERROR);
        } finally {
             // Delay un-fading to allow image to load
            setTimeout(() => setIsImageFading(false), 500);
        }
    }, [storyState]);

    const renderContent = () => {
        switch (gameState) {
            case GameState.GENRE_SELECT:
                return (
                    <div className="min-h-screen flex flex-col items-center justify-center p-4 sm:p-8">
                        <h1 className="text-5xl sm:text-7xl font-cinzel mb-4 text-center">Gemini Adventure</h1>
                        <p className="text-xl text-cyan-200 mb-12 text-center max-w-2xl">Choose your saga's beginning. A new world, generated by AI, awaits.</p>
                        <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6 max-w-4xl w-full">
                            {genres.map(genre => <GenreCard key={genre} genre={genre} onSelect={startGame} />)}
                        </div>
                    </div>
                );
            case GameState.PLAYING:
                if (!storyState) return null;
                return (
                    <div className="min-h-screen flex flex-col">
                        <header className="w-full p-4 bg-gray-900/80 backdrop-blur-sm sticky top-0 z-10 flex justify-between items-center shadow-lg">
                            <h1 className="text-2xl sm:text-3xl font-cinzel text-cyan-400">Gemini Adventure</h1>
                            <button 
                                onClick={handleNewGame}
                                className="bg-cyan-600 hover:bg-cyan-700 text-white font-bold py-2 px-4 rounded transition-colors duration-300"
                            >New Game</button>
                        </header>
                        <main className="flex-grow grid grid-cols-1 lg:grid-cols-2 gap-0">
                            <div className="relative h-64 lg:h-auto min-h-[30vh]">
                                <img
                                    src={storyState.imageUrl}
                                    alt="Scene"
                                    className={`absolute inset-0 w-full h-full object-cover transition-opacity duration-1000 ${isImageFading ? 'opacity-0' : 'opacity-100'}`}
                                />
                                 <div className="absolute inset-0 bg-gradient-to-t from-gray-900 via-gray-900/50 to-transparent lg:bg-gradient-to-r lg:from-gray-900 lg:via-gray-900/70 lg:to-transparent"></div>
                            </div>
                            <div className="flex flex-col justify-center p-6 sm:p-10 bg-gray-900">
                                <p className="text-lg sm:text-xl text-gray-300 leading-relaxed mb-8">{storyState.scenario}</p>
                                <div className="space-y-4">
                                    {storyState.choices.map((choice, index) => (
                                        <ChoiceButton key={index} choice={choice} onClick={handleChoice} disabled={false} />
                                    ))}
                                </div>
                            </div>
                        </main>
                    </div>
                );
            case GameState.ERROR:
                return <ErrorDisplay message={error || 'An unknown error occurred.'} onRestart={handleNewGame} />;
            default:
                return null;
        }
    }

    return (
        <div className="bg-gray-900 text-white min-h-screen">
             {gameState === GameState.LOADING && <LoadingOverlay />}
             {renderContent()}
        </div>
    );
};

export default App;
